# To run this build file, install Rogue from github.com/brombres/Rogue then cd
# to this folder and type "rogo" at the command line, or "rogo help" for a list
# of supported commands.

$requireRogue "2.28"

uses Utility/FilePatcher
uses Utility/VersionNumber

routine sync_products( synched_projects:String[], &synched_any )->Logical [insert]
  local files = Files( "addons/**" )
  forEach (project in synched_projects)
    if (files.sync_to(project/"addons",&keep_unused,&dry_run))
      if (not synched_any)
        banner "Synchronizing build products to linked projects"
        synched_any = true
      endIf
      files.sync_to( project/"addons", &keep_unused, &verbose )
    endIf
  endForEach
endRoutine

routine rogo_update_version( version:String )
  # Updates the version number and date in the project source and README.md.
  if (not version) version = ""
  version .= after_any("v")
  localize current_version
  if (version.count == 0) throw Error( "New version number expected, e.g. '1.0.2'. Current version: $"(current_version) )
  if (current_version != "(none)" and VersionNumber(version) <= current_version)
    error.println( "[WARNING] The new version number ($) is not higher than the current version number ($)."(version,current_version) )
  endIf

  block file = File( "README.md" )
    if (file.exists)
      local og_content = String(file)
      local content = String( og_content.count+20 )
      forEach (line in LineReader(og_content))
        if (line.contains_pattern("Version|$(I)"))
          content.println( "$| $" (line.before_last('|'),version) )
        elseIf (line.contains_pattern("Date|"))
          local today = Date.today->String(&verbose)
          content.println( "$| $" (line.before_last('|'),today) )
        else
          content.println( line )
        endIf
      endForEach
      if (content != og_content)
        println "Updating version and date in $"(file)
        file.save( content )
      endIf
    endIf
  endBlock

  block patcher = FilePatcher( File("addons/Spine/plugin.cfg") )
    patcher.replace_line( "version=", ''version="$"''(version) )
    patcher.save
  endBlock

  Files("addons/Spine/**").sync_to( File("DemoProject/addons/Spine"), &keep_unused, &verbose )
endRoutine

routine rogo_commit( new_version:String )
  # Updates source and README version number and git-commits with a version number message.
  new_version .= after_any("v")
  if (not String.exists(new_version)) throw Error( "Expected version number after 'rogo commit'. Current version: $"(current_version) )
  rogo_update_version( new_version )

  if (not System.find_executable("git")) throw Error( "Git must be installed." )
  if (project_has_uncommitted_changes)
    execute ''git commit -am "[v$]"'' (new_version)
  else
    println "No changes to commit."
  endIf
endRoutine

routine rogo_publish( new_version:String )
  # Updates source and README version number, commits, and publishes a release to GitHub.
  new_version .= after_any("v")
  if (not String.exists(new_version)) throw Error( "Expected version number after 'rogo publish'. Current version: $"(current_version) )
  if (not System.find_executable("gh")) throw Error( "The GitHub command line tool 'gh' must be installed." )

  if (not String(File("ChangeLog.md")).contains(new_version))
    throw Error( "The change log needs updating." )
  endIf

  rogo_commit( new_version )

  # These can be hard-coded to suit your project
  local cur_branch : String
  local main_branch : String

  if (not cur_branch)
    local result = Process.run("git branch --show-current",&env)
    if (result.success) cur_branch = result->String.trimmed
    else                throw Error( "Unable to detect current git branch." )
  endIf

  if (not main_branch)
    local result = Process.run("git branch --list",&env)
    if (result.success)
      local branches = result->String.replacing('*',' ').split('\n').[modify($.trimmed)]
      forEach (branch in ["main","master"])
        if (branches.contains(branch)) main_branch=branch; escapeForEach
      endForEach
    endIf
    if (not main_branch) throw Error( "Unable to detect name of main (release) branch." )
  endIf

  execute "git push origin $"(cur_branch)
  if (cur_branch != main_branch)
    if (not Console.input("$ will be merged into $. Continue? "(cur_branch,main_branch)).to_lowercase.begins_with('y')) return
    execute "git checkout $"(main_branch)
    execute "git pull"
    execute "git merge $"(cur_branch)
    execute "git push origin $"(main_branch)
    execute "git checkout $"(cur_branch)
  endIf

  if (not Console.input("Continue publishing release to GitHub? ").to_lowercase.begins_with('y')) return

  execute ''gh release create v$ --title "v$" --notes ""''(new_version,new_version)
endRoutine

routine project_has_uncommitted_changes->Logical
  local result = Process.run( "git status --porcelain", &env )
  if (not result.success)
    Console.error.println result->String
    System.exit 1
  endIf

  local lines = result->String.trimmed.split('\n').[discard($.begins_with("??"))]
  lines.discard( $ == "" )
  return not lines.is_empty
endRoutine

routine current_version->String
  contingent
    local file = File("README.md")
    necessary (file.exists)

    if local line = String(file).split('\n').find( $.contains_pattern("Version|$(I)") )
      local v = line.after_first('|').trimmed
      necessary (v.count)
      return v
    endIf
  endContingent

  return "(none)"
endRoutine

